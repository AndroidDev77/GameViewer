////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	GameModel.h
//
// summary:	Declares the game model class
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <list>
#include "Game.h"
#include <QtCore\Qobject.h>
#include <QtCore\QAbstractItemModel>
#include <QOpenGLTexture>
#include <QPixmap>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A data Model for the game. </summary>
///
/// <remarks>	Chris, 10/6/2019. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GameModel : public QAbstractListModel
{

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	Chris, 10/6/2019. </remarks>
	///
	/// <param name="parent">	[in,out] (Optional) If non-null, the parent. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GameModel(QObject* parent = nullptr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Chris, 10/6/2019. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~GameModel();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Row count. </summary>
	///
	/// <remarks>	Chris, 10/6/2019. </remarks>
	///
	/// <param name="parent">	The parent. </param>
	///
	/// <returns>	An int. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int rowCount(const QModelIndex &parent) const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Data. </summary>
	///
	/// <remarks>	Chris, 10/6/2019. </remarks>
	///
	/// <param name="index">	Zero-based index of the. </param>
	/// <param name="role"> 	(Optional) The role. </param>
	///
	/// <returns>	A QVariant. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Flags the given index. </summary>
	///
	/// <remarks>	Chris, 10/6/2019. </remarks>
	///
	/// <param name="index">	Zero-based index of the. </param>
	///
	/// <returns>	The Qt::ItemFlags. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Qt::ItemFlags flags(const QModelIndex& index) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the game list. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::vector<Game*>* getList();

protected:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Determine if we can fetch more. </summary>
	///
	/// <remarks>	Chris, 10/6/2019. </remarks>
	///
	/// <param name="parent">	The parent. </param>
	///
	/// <returns>	True if we can fetch more, false if not. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool canFetchMore(const QModelIndex& parent) const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Fetches a more. </summary>
	///
	/// <remarks>	Chris, 10/6/2019. </remarks>
	///
	/// <param name="parent">	The parent. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void fetchMore(const QModelIndex& parent) override;

	

private:

	/// <summary>	List of games. </summary>
	std::vector<Game*>* gameList;
	size_t gameCount;
};

